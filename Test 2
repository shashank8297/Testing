The error `org.apache.kafka.common.KafkaException: Failed to construct kafka producer` indicates that there is an issue with the Kafka producer configuration. Let's try to identify the specific problem and address it.

### Step-by-Step Troubleshooting

1. **Verify Kafka Configuration**: Ensure that the `application.properties` for the producer contains the correct Kafka settings.

2. **Check Kafka and ZooKeeper are Running**: Ensure that Kafka and ZooKeeper services are up and running.

3. **Enable Detailed Logging**: Enable detailed logging to get more information about the error.

4. **Check Dependency Versions**: Ensure that you are using compatible versions of the Spring Boot and Spring Kafka dependencies.

### Step 1: Verify `application.properties`

Ensure that your `application.properties` file in the producer application contains the correct Kafka configurations.

#### `kafka-producer/src/main/resources/application.properties`

```properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
```

### Step 2: Check Kafka and ZooKeeper

Ensure that both Kafka and ZooKeeper are running. Use the following commands to start them if they are not already running:

#### Start ZooKeeper

```sh
bin/zookeeper-server-start.sh config/zookeeper.properties
```

#### Start Kafka

```sh
bin/kafka-server-start.sh config/server.properties
```

### Step 3: Enable Detailed Logging

Add the following configuration to your `application.properties` to enable detailed logging:

```properties
logging.level.org.apache.kafka=DEBUG
logging.level.org.springframework.kafka=DEBUG
```

### Step 4: Check Kafka Configuration in `KafkaConfig.java`

Ensure that the Kafka configuration is correctly set up in `KafkaConfig.java`.

#### `KafkaConfig.java`

```java
package com.example.producer;

import org.apache.kafka.clients.admin.NewTopic;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.support.serializer.JsonSerializer;

import java.util.HashMap;
import java.util.Map;

@Configuration
public class KafkaConfig {

    @Bean
    public NewTopic topic() {
        return new NewTopic("topic-name", 1, (short) 1);
    }

    @Bean
    public ProducerFactory<String, String> producerFactory() {
        Map<String, Object> config = new HashMap<>();
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, String> kafkaTemplate() {
        return new KafkaTemplate<>(producerFactory());
    }
}
```

### Step 5: Check Dependency Versions

Ensure you are using compatible versions of the dependencies. Here’s the `pom.xml` again for reference:

#### `pom.xml`

```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://www.maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.0.0</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
    <groupId>com.example</groupId>
    <artifactId>kafka-producer</artifactId>
    <version>1.0.0</version>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka</artifactId>
        </dependency>
    </dependencies>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
```

### Step 6: Additional Diagnostic Information

If the issue persists, it would be helpful to see the full stack trace of the error. This will provide more specific details about what is going wrong. The full stack trace should show up in the logs after enabling detailed logging.

### Running Kafka in Docker (Optional)

If running Kafka locally is problematic, you can use Docker to run Kafka. Here’s a simple Docker Compose file:

#### `docker-compose.yml`

```yaml
version: '3.8'
services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:2.12-2.2.1
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper
```

Run the following command to start Kafka and ZooKeeper using Docker Compose:

```sh
docker-compose up -d
```

### Rebuild and Run the Producer

After verifying all the configurations and ensuring Kafka is running, rebuild and run the producer application:

#### Build the Producer Application

```bash
cd kafka-producer
mvn clean install
```

#### Run the Producer Application

```bash
java -jar target/kafka-producer-1.0.0.jar
```

If you continue to face issues, please provide the full stack trace of the error for more precise debugging.
